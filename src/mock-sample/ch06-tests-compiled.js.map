{"version":3,"sources":["ch06-tests.js"],"names":[],"mappings":"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","file":"ch06-tests-compiled.js","sourcesContent":["/**\n * Unit testing with UI code\n */\nQUnit.test(\"cleanInput\", function (assert) {\n\n\n    var input = ['', '-44-44-', '44444', '    4    ', '   4-4   '];\n    var assertions = ['', '4444', '44444', '4', '44'];\n\n    assert.expect(input.length);\n    input.forEach(function (val, key) {\n        assert.equal(cleanInput(val), assertions[key]);\n    });\n});\n\n\nQUnit.test(\"checkLengthSsn\", function (assert) {\n\n    //Either.prototype.isLeft = false\n    //Left.prototype.isLeft   = true\n    //\n    //Either.prototype.isRight = false\n    //Right.prototype.isRight  = true\n\n    assert.ok(checkLengthSsn('444444444').isRight);\n    assert.ok(checkLengthSsn('').isLeft);\n    assert.ok(checkLengthSsn('44444444').isLeft);\n    assert.equal(checkLengthSsn('444444444').chain(R.length), 9);\n});\n\n\nQUnit.test(\"findStudent returning null\", function (assert) {\n\n    var studentStore = Store('students');\n    var mockContext = sinon.mock(studentStore);\n\n    mockContext.expects(\"get\").once().returns(null);\n\n    var findStudent = safefetchRecord(studentStore);\n\n    assert.ok(findStudent('xxx-xx-xxxx').isLeft);\n    mockContext.verify();\n    mockContext.restore();\n});\n\n\nQUnit.test(\"findStudent returning valid user\", function (assert) {\n\n    var studentStore = Store('students');\n    var mockContext = sinon.mock(studentStore);\n\n    mockContext.expects(\"get\").once().returns(new Student('Alonzo', 'Church', 'Princeton').setSsn('444-44-4444'));\n\n    var findStudent = safefetchRecord(studentStore);\n\n    assert.ok(findStudent('444-44-4444').isRight);\n    mockContext.verify();\n    mockContext.restore();\n});\n\nQUnit.test(\"csv\", function (assert) {\n\n    assert.equal(populateRow(['']), '<tr><td></td></tr>');\n    assert.equal(populateRow(['Alonzo']), '<tr><td>Alonzo</td></tr>');\n    assert.equal(populateRow(['Alonzo', 'Church']), '<tr><td>Alonzo</td><td>Church</td></tr>');\n    assert.equal(populateRow(['Alonzo', '', 'Church']), '<tr><td>Alonzo</td><td></td><td>Church</td></tr>');\n});\n\n\n//\n//QUnit.test(\"Testing addToRoster\", function (assert) {\n//\n//    var testStudentId1 = '444-44-4444';\n//    var testStudentId2 = '555-55-5555';\n//    assert.equal(addToRoster(testStudentId1).run(), 1);\n//    assert.equal(addToRoster(testStudentId2).run(), 2);\n//});\n"]}