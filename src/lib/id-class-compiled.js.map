{"version":3,"sources":["id-class.js"],"names":[],"mappings":";;;;;;;;;IAGM,EAAE;AACO,aADT,EAAE,CACQ,KAAK,EAAE;8BADjB,EAAE;;AAEA,YAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;;iBAHC,EAAE;;eAQE,kBAAG;AACL,mBAAO,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CAAC;SACxG;;;;;eAGK,gBAAC,CAAC,EAAE;AACN,mBAAO,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;SAC5C;;;;;eAGG,gBAAG;AACH,gBAAG,EAAE,IAAI,CAAC,KAAK,YAAY,EAAE,CAAA,AAAC,EAAE;AAC5B,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC;SACtC;;;;;eAGI,iBAAG;AACJ,mBAAO,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;SAC5F;;;;;eAGS,gBAAC,CAAC,EAAE,GAAG,EAAE;AACX,mBAAO,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;;;;;eAGE,aAAC,CAAC,EAAE;AACH,mBAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;;;;;eAII,eAAC,CAAC,EAAE;AACL,mBAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB;;;;;eAGK,gBAAC,CAAC,EAAE;AACN,mBAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACzB;;;;;eAQM,mBAAG;AACN,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;eAEO,oBAAG;AACP,mBAAO,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;SACpC;;;aA3DQ,eAAG;AACR,mBAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;eA8CQ,YAAC,CAAC,EAAE;AACT,mBAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACpB;;;WAtDC,EAAE","file":"id-class-compiled.js","sourcesContent":["/**\n * Identity Monad\n */\nclass Id {\n    constructor(value) {\n        this._value = value;\n    }\n    get value() {\n        return this._value;\n    }\n\n    equals() {\n        return typeof this.value.equals === \"function\" ? this.value.equals(b.value) : this.value === b.value;\n    }\n\n// Semigroup (value must also be a Semigroup)\n    concat(b) {\n        return Id.of(this.value.concat(b.value));\n    }\n\n// Flatten\n    join() {\n        if(!(this.value instanceof Id)) {\n            return this;\n        }\n        return this.value.extract().join();\n    };\n\n// Monoid (value must also be a Monoid)\n    empty() {\n        return Id.of(this.value.empty ? this.value.empty() : this.value.constructor.empty());\n}   ;\n\n// Foldable\n    reduce(f, acc) {\n        return f(acc, this.value);\n    };\n\n    // Functor\n    map(f) {\n        return Id.of(f(this.value));\n    };\n\n\n    // Chain\n    chain(f) {\n        return f(this.value);\n    };\n\n    // Extend\n    extend(f) {\n        return Id.of(f(this));\n    };\n\n    // Monad\n    static of(a) {\n        return new Id(a);\n    };\n\n    // Comonad\n    extract() {\n        return this.value;\n    };\n\n    toString() {\n        return 'Id [' + this.value + ']';\n    };\n}"]}