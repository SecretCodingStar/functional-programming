{"version":3,"sources":["maybe.js"],"names":[],"mappings":"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","file":"maybe-compiled.js","sourcesContent":["// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/maybe\n */\n\n// -- Aliases ----------------------------------------------------------\nvar clone = Object.create;\nvar unimplemented = function () {\n    throw new Error('Not implemented.')\n};\nvar noop = function () {\n    return this\n};\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * A structure for values that may not be present, or computations that may\n * fail. `Maybe(a)` explicitly models the effects that are implicit in\n * `Nullable` types, thus has none of the problems associated with\n * `null` or `undefined` — like `NullPointerExceptions`.\n *\n * The class models two different cases:\n *\n *  + `Just a` — represents a `Maybe(a)` that contains a value. `a` may\n *     be any value, including `null` or `undefined`.\n *\n *  + `Nothing` — represents a `Maybe(a)` that has no values. Or a\n *     failure that needs no additional information.\n *\n * Common uses of this structure includes modelling values that may or may\n * not be present in a collection, thus instead of needing a\n * `collection.has(a)`, the `collection.get(a)` operation gives you all\n * the information you need — `collection.get(a).is-nothing` being\n * equivalent to `collection.has(a)`; Similarly the same reasoning may\n * be applied to computations that may fail to provide a value, e.g.:\n * `collection.find(predicate)` can safely return a `Maybe(a)` instance,\n * even if the collection contains nullable values.\n *\n * Furthermore, the values of `Maybe(a)` can be combined and manipulated\n * by using the expressive monadic operations. This allows safely\n * sequencing operations that may fail, and safely composing values that\n * you don't know whether they're present or not, failing early\n * (returning a `Nothing`) if any of the operations fail.\n *\n * If one wants to store additional information about failures, the\n * [Either][] and [Validation][] structures provide such a capability, and\n * should be used instead of the `Maybe(a)` structure.\n *\n * [Either]: https://github.com/folktale/data.either\n * [Validation]: https://github.com/folktale/data.validation\n *\n *\n * @class\n */\nfunction Maybe() {\n}\n\n// The case for successful values\nJust.prototype = clone(Maybe.prototype);\nfunction Just(a) {\n    this.value = a\n}\n\n// The case for failure values\nNothing.prototype = clone(Maybe.prototype);\nfunction Nothing() {\n}\n\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure with an absent value. Commonly used\n * to represent a failure.\n *\n * @summary Void → Maybe[α]\n */\nMaybe.Nothing = function () {\n    return new Nothing\n};\nMaybe.prototype.Nothing = Maybe.Nothing;\n\n/**\n * Constructs a new `Maybe[α]` structure that holds the single value\n * `α`. Commonly used to represent a success.\n *\n * `α` can be any value, including `null`, `undefined` or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.Just = function (a) {\n    return new Just(a)\n};\nMaybe.prototype.Just = Maybe.Just;\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure from a nullable type.\n *\n * If the value is either `null` or `undefined`, this function returns a\n * `Nothing`, otherwise the value is wrapped in a `Just(α)`.\n *\n * @summary α → Maybe[α]\n */\nMaybe.fromNullable = function (a) {\n    return a != null ? new Just(a)\n        : /* otherwise */  new Nothing\n};\nMaybe.prototype.fromNullable = Maybe.fromNullable;\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Maybe[α]` structure contains a failure (i.e.: `Nothing`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isNothing = false;\nNothing.prototype.isNothing = true;\n\n\n/**\n * True if the `Maybe[α]` structure contains a single value (i.e.: `Just(α)`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isJust = false;\nJust.prototype.isJust = true;\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Maybe[α]` structure holding the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.of = function (a) {\n    return Maybe.prototype.Just(a);\n};\nMaybe.prototype.of = Maybe.of;\n\n\n/**\n * Applies the function inside the `Maybe[α]` structure to another\n * applicative type.\n *\n * The `Maybe[α]` structure should contain a function value, otherwise a\n * `TypeError` is thrown.\n *\n * @method\n * @summary (@Maybe[α → β], f:Applicative[_]) => f[α] → f[β]\n */\nMaybe.prototype.ap = unimplemented;\n\nNothing.prototype.ap = function (b) {\n    return b;\n};\n\nJust.prototype.ap = function (b) {\n    return b.map(this.value);\n};\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using a regular unary\n * function.\n *\n * @method\n * @summary @Maybe[α] => (α → β) → Maybe[β]\n */\nMaybe.prototype.map = unimplemented;\nNothing.prototype.map = noop;\n\nJust.prototype.map = function (f) {\n    return this.of(f(this.value));\n};\n\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using an unary function\n * to monads.\n *\n * @method\n * @summary (@Maybe[α], m:Monad[_]) => (α → m[β]) → m[β]\n */\nMaybe.prototype.chain = unimplemented;\nNothing.prototype.chain = noop;\n\nJust.prototype.chain = function (f) {\n    return f(this.value);\n};\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Void → String\n */\nMaybe.prototype.toString = unimplemented;\n\nNothing.prototype.toString = function () {\n    return 'Maybe.Nothing'\n};\n\nJust.prototype.toString = function () {\n    return 'Maybe.Just(' + this.value + ')'\n};\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if a `Maybe[α]` structure is equal to another `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Maybe[α] → Boolean\n */\nMaybe.prototype.isEqual = unimplemented;\n\nNothing.prototype.isEqual = function (b) {\n    return b.isNothing\n};\n\nJust.prototype.isEqual = function (b) {\n    return b.isJust\n        && b.value === this.value\n};\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the value out of the `Maybe[α]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary @Maybe[α] => Void → a,      :: partial, throws\n * @see {@link module:lib/maybe~Maybe#getOrElse} — A getter that can handle failures\n * @throws {TypeError} if the structure has no value (`Nothing`).\n */\nMaybe.prototype.get = unimplemented;\n\nNothing.prototype.get = function () {\n    throw new TypeError(\"Can't extract the value of a Nothing.\")\n};\n\nJust.prototype.get = function () {\n    return this.value\n};\n\n\n/**\n * Extracts the value out of the `Maybe[α]` structure. If there is no value,\n * returns the given default.\n *\n * @method\n * @summary @Maybe[α] => α → α\n */\nMaybe.prototype.getOrElse = unimplemented;\n\nNothing.prototype.getOrElse = function (a) {\n    return a\n};\n\nJust.prototype.getOrElse = function (_) {\n    return this.value\n};\n\nMaybe.prototype.orElse = unimplemented\n\nNothing.prototype.orElse = function(f) {\n    return f()\n}\n\nJust.prototype.orElse = function(_) {\n    return this\n}"]}