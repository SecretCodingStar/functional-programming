{"version":3,"sources":["db.js"],"names":[],"mappings":"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","file":"db-compiled.js","sourcesContent":["\nconst DB_NAME = 'students';\n\nvar openDB = function() {\n    const version = 2;\n    return new Promise(function(resolve, reject) {\n        //Opening the DB\n        var request = indexedDB.open(\"studentData\", version);\n        var db;\n\n        //Handling onupgradeneeded\n        //Will be called if the database is new or the version is modified\n        request.onupgradeneeded = function(e) {\n            db = e.target.result;\n            e.target.transaction.onerror = indexedDB.onerror;\n\n            //Deleting DB if already exists\n            if(db.objectStoreNames.contains(DB_NAME)) {\n                db.deleteObjectStore(DB_NAME);\n            }\n            //Creating a new DB store with a paecified key property\n            var store = db.createObjectStore(\"students\", {keyPath: \"ssn\", autoIncrement: true});\n        };\n\n        //If opening DB succeeds\n        request.onsuccess = function(e) {\n            db = e.target.result;\n            resolve(db);\n        };\n\n        //If DB couldn't be opened for some reason\n        request.onerror = function(e) {\n            reject(Error(\"Couldn't open DB\"));\n        };\n    });\n};\n\nvar find = function (db, studentId) {\n    const trans = db.transaction(['students'], 'readonly');\n    const store = trans.objectStore('students');\n    return new Promise(function(resolve, reject) {\n        var request = store.get(studentId);\n\n        request.onerror = function() {\n            reject(new Error('Student not found!'));\n        };\n        request.onsuccess = function() {\n            resolve(request.result);\n        };\n    });\n};\n\nvar getAllStudents = function(db) {\n    var studentArr = [];\n\n    //Creating a transaction object to perform Read/Write operations\n    var trans = db.transaction([DB_NAME], \"readwrite\");\n\n    //Getting a reference of the todo store\n    var store = trans.objectStore(DB_NAME);\n\n    //Wrapping all the logic inside a promise\n    return new Promise(function(resolve, reject) {\n        //Opening a cursor to fetch items from lower bound in the DB\n        //var keyRange = IDBKeyRange.lowerBound(0);\n        var cursorRequest = store.openCursor();\n\n        //success callback\n        cursorRequest.onsuccess = function(e) {\n            var result = e.target.result;\n\n            //Resolving the promise with todo items when the result id empty\n            if(result === null || result === undefined) {\n\n                resolve({\n                    'db': db,\n                    'data': studentArr\n                });\n            }\n            //Pushing result into the todo list\n            else{\n                studentArr.push(result.value);\n                result.continue();\n            }\n        };\n\n        //Error callback\n        cursorRequest.onerror = function(e){\n            reject(\"Couldn't fetch items from the DB\");\n        };\n    });\n};\n\nvar addStudent = function(db, firstname, lastname, ssn) {\n    //Creating a transaction object to perform read-write operations\n    var trans = db.transaction([DB_NAME], \"readwrite\");\n    var store = trans.objectStore(DB_NAME);\n\n    //Wrapping logic inside a promise\n    return new Promise(function(resolve, reject){\n        //Sending a request to add an item\n        var request = store.add({\n            ssn: ssn, firstname: firstname, lastname: lastname\n        });\n\n        //success callback\n        request.onsuccess = function(e) {\n            resolve(db);\n        };\n\n        //error callback\n        request.onerror = function(e) {\n            console.log(e.value);\n            reject(\"Couldn't add the passed item\");\n        };\n    });\n};\n\n\nvar addStudents = function(db, arr) {\n    //Creating a transaction object to perform read-write operations\n    var trans = db.transaction([DB_NAME], \"readwrite\");\n    var store = trans.objectStore(DB_NAME);\n\n    //Wrapping logic inside a promise\n    return new Promise(function(resolve, reject){\n        for(let i in arr) {\n            //Sending a request to add an item\n            var request = store.add(arr[i]);\n\n            //success callback\n            request.onsuccess = function(e) {\n                // continue\n                console.log('Added student: ' + arr[i].ssn);\n            };\n\n            //error callback\n            request.onerror = function(e) {\n                console.log(e.value);\n                reject(\"Couldn't add the passed item\");\n            };\n        }\n        resolve(db);\n    });\n};\n\nvar deleteStudent = function(db, id) {\n    return new Promise(function(resolve, reject){\n        var trans = db.transaction([DB_NAME], \"readwrite\");\n        var store = trans.objectStore(DB_NAME);\n        var request = store.delete(id);\n\n        request.onsuccess = function(e) {\n            resolve(true);\n        };\n\n        request.onerror = function(e) {\n            console.log(e);\n            reject(\"Couldn't delete the item\");\n        };\n    });\n};"]}