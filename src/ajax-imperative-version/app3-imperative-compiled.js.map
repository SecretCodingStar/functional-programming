{"version":3,"sources":["app3-imperative.js"],"names":[],"mappings":";;AAAA,IAAM,IAAI,GAAG,uBAAuB,CAAC;;AAErC,IAAI,OAAO,GAAG,SAAV,OAAO,CAAa,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;AAC1C,QAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;AAC/B,OAAG,CAAC,YAAY,GAAG,MAAM,CAAC;AAC1B,OAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACrB,OAAG,CAAC,MAAM,GAAG,YAAW;AACpB,YAAG,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;AAClB,mBAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACzB,MACI;AACD,kBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;SACjC;KACJ,CAAC;AACF,OAAG,CAAC,OAAO,GAAG,YAAY;AACtB,cAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;KAC7B,CAAC;AACF,OAAG,CAAC,IAAI,EAAE,CAAC;CACd,CAAC;;AAEF,IAAI,kBAAkB,GAAG,SAArB,kBAAkB,CAAa,OAAO,EAAE,KAAK,EAAE;AAC/C,KAAC,CAAC,wBAAwB,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,GAChE,MAAM,GAAG,OAAO,CAAC,SAAS,GAAG,OAAO,GACpC,MAAM,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,GACnC,MAAM,GAAI,KAAK,GAAG,OAAO,GACzB,OAAO,CAAC,CAAC;CAChB,CAAC;;AAEF,SAAS,OAAO,CAAC,MAAM,EAAE;AACrB,WAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE,OAAO,EAAE;AAAE,eAAO,KAAK,GAAG,OAAO,CAAC;KAAE,EAAE,CAAC,CAAC,GAClF,MAAM,CAAC,MAAM,CAAC,CAAC;CAExB;;AAED,OAAO,CAAC,IAAI,GAAG,WAAW,EAAE,UAAS,QAAQ,EAAE;;AACvC,KAAC,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;AACrB,YAAQ,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC,EAAC;AACxB,YAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;AAC5B,YAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC3B,eAAO,CAAC,CAAC;KACZ,CAAC,CAAC;AACH,SAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,YAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1B,YAAG,OAAO,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,EAAE;AACjC,mBAAO,CAAC,IAAI,GAAG,cAAc,GAAG,OAAO,CAAC,GAAG;AACvC,sBAAU,MAAM,EAAE;AACd,kCAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;aAChD,EACD,UAAU,KAAK,EAAE;;AACb,qBAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;aAClC,CAAC,CAAC;SACV;KACJ;CACJ,EAAE,UAAU,KAAK,EAAE;;AAChB,SAAK,CAAC,KAAK,CAAC,CAAC;CAChB,CACJ,CAAC","file":"app3-imperative-compiled.js","sourcesContent":["const HOST = 'http://localhost:8000';\n\nvar getJSON = function (url, resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.responseType = 'json';\n    req.open('GET', url);\n    req.onload = function() {\n        if(req.status == 200) {\n            resolve(req.response);\n        }\n        else {\n            reject(Error(req.statusText));\n        }\n    };\n    req.onerror = function () {\n        reject(Error(\"IO Error\"));\n    };\n    req.send();\n};\n\nvar addStudentToRoster = function (student, grade) {\n    $('#studentRoster tr:last').after(\"<tr><td>\" + student.ssn + \"</td>\" +\n        \"<td>\" + student.firstname + \"</td>\" +\n        \"<td>\" + student.lastname + \"</td>\" +\n        \"<td>\" +  grade + \"</td>\" +\n        \"</tr>\");\n};\n\nfunction average(grades) {\n    return Math.ceil(grades.reduce(function (total, current) { return total + current; }, 0)\n        / grades.length);\n\n}\n\ngetJSON(HOST + '/students', function(students) {  // #A\n        $('#spinner').hide();\n        students.sort(function(a, b){\n            if(a.ssn < b.ssn) return -1;\n            if(a.ssn > b.ssn) return 1;\n            return 0;\n        });\n        for(let i = 0; i < students.length; i++) {\n            var student = students[i];\n            if(student.address.country === 'US') {\n                getJSON(HOST + '/grades?ssn=' + student.ssn,  // #B\n                    function (grades) {\n                        addStudentToRoster(student, average(grades)); // #C\n                    },\n                    function (error) { // #B\n                        alert('Inside grades' + error);\n                    });\n            }\n        }\n    }, function (error) { // #A\n        alert(error);\n    }\n);"]}