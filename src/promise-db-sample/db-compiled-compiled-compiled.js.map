{"version":3,"sources":["db-compiled-compiled.js"],"names":[],"mappings":"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","file":"db-compiled-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar DB_NAME = \"students\";\nvar open = function open() {\n    var version = 2;\n    return new Promise(function (resolve, reject) {\n        //Opening the DB\n        var request = indexedDB.open(\"studentData\", version);\n        var db;\n\n        //Handling onupgradeneeded\n        //Will be called if the database is new or the version is modified\n        request.onupgradeneeded = function (e) {\n            db = e.target.result;\n            e.target.transaction.onerror = indexedDB.onerror;\n\n            //Deleting DB if already exists\n            if (db.objectStoreNames.contains(DB_NAME)) {\n                db.deleteObjectStore(DB_NAME);\n            }\n            //Creating a new DB store with a paecified key property\n            var store = db.createObjectStore(\"students\", { keyPath: \"ssn\", autoIncrement: true });\n        };\n\n        //If opening DB succeeds\n        request.onsuccess = function (e) {\n            db = e.target.result;\n            resolve(db);\n        };\n\n        //If DB couldn't be opened for some reason\n        request.onerror = function (e) {\n            reject(Error(\"Couldn't open DB\"));\n        };\n    });\n};\n\nvar find = function find(db, studentId) {\n    var trans = db.transaction([\"students\"], \"readonly\");\n    var store = trans.objectStore(\"students\");\n    return new Promise(function (resolve, reject) {\n        var request = store.get(studentId);\n\n        request.onerror = function () {\n            reject(new Error(\"Student not found!\"));\n        };\n        request.onsuccess = function () {\n            resolve(request.result);\n        };\n    });\n};\n\nvar getAllStudents = function getAllStudents(db) {\n    var studentArr = [];\n\n    //Creating a transaction object to perform Read/Write operations\n    var trans = db.transaction([DB_NAME], \"readwrite\");\n\n    //Getting a reference of the todo store\n    var store = trans.objectStore(DB_NAME);\n\n    //Wrapping all the logic inside a promise\n    return new Promise(function (resolve, reject) {\n        //Opening a cursor to fetch items from lower bound in the DB\n        //var keyRange = IDBKeyRange.lowerBound(0);\n        var cursorRequest = store.openCursor();\n\n        //success callback\n        cursorRequest.onsuccess = function (e) {\n            var result = e.target.result;\n\n            //Resolving the promise with todo items when the result id empty\n            if (result === null || result === undefined) {\n\n                resolve({\n                    \"db\": db,\n                    \"data\": studentArr\n                });\n            }\n            //Pushing result into the todo list\n            else {\n                studentArr.push(result.value);\n                result[\"continue\"]();\n            }\n        };\n\n        //Error callback\n        cursorRequest.onerror = function (e) {\n            reject(\"Couldn't fetch items from the DB\");\n        };\n    });\n};\n\nvar addStudent = function addStudent(db, firstname, lastname, ssn) {\n    //Creating a transaction object to perform read-write operations\n    var trans = db.transaction([DB_NAME], \"readwrite\");\n    var store = trans.objectStore(DB_NAME);\n\n    //Wrapping logic inside a promise\n    return new Promise(function (resolve, reject) {\n        //Sending a request to add an item\n        var request = store.add({\n            ssn: ssn, firstname: firstname, lastname: lastname\n        });\n\n        //success callback\n        request.onsuccess = function (e) {\n            resolve(db);\n        };\n\n        //error callback\n        request.onerror = function (e) {\n            console.log(e.value);\n            reject(\"Couldn't add the passed item\");\n        };\n    });\n};\n\nvar deleteStudent = function deleteStudent(db, id) {\n    return new Promise(function (resolve, reject) {\n        var trans = db.transaction([DB_NAME], \"readwrite\");\n        var store = trans.objectStore(DB_NAME);\n        var request = store[\"delete\"](id);\n\n        request.onsuccess = function (e) {\n            resolve(true);\n        };\n\n        request.onerror = function (e) {\n            console.log(e);\n            reject(\"Couldn't delete the item\");\n        };\n    });\n};\n\n//# sourceMappingURL=db-compiled.js.map\n\n//# sourceMappingURL=db-compiled-compiled.js.map"]}